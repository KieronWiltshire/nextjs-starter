import type { Metadata } from "next";
import { Geist, Geist_Mono } from "next/font/google";
import { NextIntlClientProvider } from "next-intl";
import { ThemeProvider } from "next-themes";
import { SocketIOProvider } from "@/providers/socketio";
import { getSession } from "@/lib/session";
import "./globals.css";
import Layout from "@/components/layout";

const geistSans = Geist({
  variable: "--font-geist-sans",
  subsets: ["latin"],
});

const geistMono = Geist_Mono({
  variable: "--font-geist-mono",
  subsets: ["latin"],
});

export const metadata: Metadata = {
  title: "Create Next App",
  description: "Generated by create next app",
};

export default async function RootLayout({
  children,
  params,
}: Readonly<{
  children: React.ReactNode;
  params: Promise<{locale: string}>;
}>) {
  const {locale} = await params;
  const session = await getSession();
  
  let wsToken = null;

  if (session.auth?.accessToken) {
    try {
      const response = await fetch(`${process.env.API_URL}/auth/ws-token`, {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${session.auth.accessToken}`,
        }
      });
      if (response.ok) {
        const { access_token: accessToken } = await response.json();
        wsToken = accessToken;
      }
    } catch {}
  }

  return (
    <html lang={locale} suppressHydrationWarning>
      <body
        className={`${geistSans.variable} ${geistMono.variable} antialiased`}
      >
        <NextIntlClientProvider>
          <ThemeProvider attribute="class" defaultTheme="system" enableSystem disableTransitionOnChange>
            <SocketIOProvider apiUrl={process.env.API_URL} accessToken={wsToken}>
              <Layout>
                {children}
              </Layout>
            </SocketIOProvider>
          </ThemeProvider>
        </NextIntlClientProvider>
      </body>
    </html>
  );
}
